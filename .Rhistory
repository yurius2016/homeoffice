ls)=
ls()
dir()
getwd()
args(lm)
f<-function(a,b){print(a); print(b)}
f(45)
f(45,67)
f<-function(a,b=6){print(a); print(b)}
f(45)
?cat
>lm
?lm
search()
search(lm)
search("lm")
search(lm())
search()
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & C(T,F,F)
TRUE & c(T,F,F)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE,FALSE)
TRUE || c(TRUE, FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints > 5
which(ints >7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4,divisor = 2)
args(remainder)
submit()
c(1.4,3.6,7.9,8.8)
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("hi","there")
submit()
mad_libs("Erlangen","funny","table")
submit()
'I'%p%'love'%p%'R'
'I'%p%'love'%p%'R!'
d<-Sys.Date()
d
class(d)
d<-as.Date("1970-01-10")
unclass(d)
d<-Sys.time()
d
p<-as.POSIXlt(d)
p
names(unclass(p))
p<-as.POSIXct(d)
names(unclass(p))
p
names(unclass(p))
p
unclass(p)
cube<-function(x,n){x^3}
cube(3)
x<-1:10
if(x>5){x<-0}
x
d=3L
d
f=3
f
class(d)
class(f)
f=NULL
class(f)
cbind(3,d)
setwd("C:/Users/savchuk/Desktop/coursera/course2week4")
dir
dir()
setwd("C:/Users/savchuk/Desktop/coursera/course2week4/rprog_data_ProgAssignment3-data")
dir()
dat <- read.csv("hospital-data.csv")
dat <- read.csv("outcome-of-care-measures.csv")
dat <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
head(dat)
dat[,11]
dat[4:50,11]
dat[,11] <- as.numeric(dat[,11])
dat[4:50,11]
hist(dat[,11])
mean(dat[,11],na\)
mean(dat[,11],na.rm = T)
demo(graphics)
demo(graphics)
setwd("C:/Users/savchuk/Desktop/coursera/course2week4")
dir()
source("best.R")
best("TX","heart attack")
source("best.R")
best("TT","heart attack")
v <- c("as","dfg","wert")
sort(v)
vs <- sort(v)
vs[1]
vs[2]
length(v)
length(vs) <- 0
vs
vs[2]
vs <- sort(v)
vs[2]
length(vs) <- 5
vs
sort(v)[1]
v <- c(4,5,78,34,56,2)
v <- c(4,5,78,34,56,2,5)
which(v == 5)
demo(stop)
?stop
source("best.R")
best("MD","heart attack")
best("MD","pneumonia")
dat[,11]
datst <- split(dat,dat$State)
names(datst)
datst[[TX]]
datst["TX"]
datst$TX$Hospital.Name
sort(datst$TX$Hospital.Name)
order(datst$TX$Hospital.Name)
sort(datst$TX$Hospital.Name)[1]
minim
?min
min(datst$TX$Comparison.to.U.S..Rate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
min(datst$TX$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
datst$TX$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
datst$TX[,19]
dat[,19] <- as.numeric(dat[,19])
datst <- split(dat,dat$State)
min(datst$TX$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
datst$TX
datst$TX[,19]
min(datst$TX[,19],na.rm = T)
min(datst$TX$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,na.rm = T)
ind <- which(datst$TX$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure<8.4)
ind
ind <- which(datst$TX$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure== 8.7)
ind
datst$TX[ind,]
datst$TX[,ind]
datst$TX[3,]
datst$TX$[30,50]
datst$TX[30,50]
datst$TX[30,5]
datst$TX[30,2]
ind
datst$TX[61,]$Hospital.Name
datst$TX[ind,]$Hospital.Name
datst$TX[19,]
datst$TX[,19]
sort(datst$TX[,19])
sort(datst$TX[,19],na.last = T)
sort(datst$TX[,19],na.last = T)[4]
s <- sort(datst$TX[,19],na.last = T)
s[4]
datst$TX$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
as.numeric(datst$TX$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
sort(as.numeric(datst$TX$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
sort(as.numeric(datst$TX$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))[4]
m <- sort(dat_st[[state]][, 11],na.last = T)
return(data_on_states[[state]][hosp[1],]$Hospital.Name)
g
dat
names(dat)
names(datst)
v
which(v == 5)
ind <- which (v == 5)
ind
v[ind] <- 6
v
v[3:5]
v[3:5] <- sort(v[3:5])
v
